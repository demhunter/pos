<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.pos.transaction.dao.CustomerBrokerageDao">

    <insert id="saveBrokerages" parameterType="com.pos.transaction.domain.TransactionCustomerBrokerage">
        INSERT INTO transaction_customer_brokerage
        (
            transaction_id,
            ancestor_user_id,
            `level`,
            withdraw_rate,
            brokerage_rate,
            brokerage,
            status_time,
            create_time
        ) VALUES
        <foreach collection="brokerages" item="item" index="index" open="" separator="," close="">
            (
                #{item.transactionId},
                #{item.ancestorUserId},
                #{item.level},
                #{item.withdrawRate},
                #{item.brokerageRate},
                #{item.brokerage},
                NOW(),
                NOW()
            )
        </foreach>
    </insert>

    <select id="getDateSectionBrokerage" resultType="Decimal">
        SELECT
            SUM(brokerage)
        FROM transaction_customer_brokerage
        WHERE ancestor_user_id = #{userId}
        AND create_time &gt; #{begin}
        AND create_time &lt; #{end}
    </select>

    <select id="queryDailyBrokerage" resultType="com.pos.transaction.dto.brokerage.BrokerageDailyStatisticsDto">
        SELECT
            DATE_FORMAT(create_time, '%Y-%m-%d') AS dateKey,
            SUM(brokerage) AS brokerage
        FROM transaction_customer_brokerage
        WHERE ancestor_user_id = #{userId}
        GROUP BY dateKey
        ORDER BY dateKey DESC
        LIMIT #{limitHelper.offset}, #{limitHelper.pageSize}
    </select>

    <select id="queryCanWithdrawBrokerage" resultType="decimal">
        SELECT
            SUM(brokerage)
        FROM transaction_customer_brokerage
        WHERE ancestor_user_id = #{userId}
        AND create_time &lt; #{deadline}
    </select>

    <update id="markBrokerageStatus">
        UPDATE transaction_customer_brokerage
        SET
            status = #{toStatus},
            status_time = NOW()
        WHERE user_id = #{userId}
        AND status = #{fromStatus}
        <if test="deadline != null">
            create_time &lt; #{deadline}
        </if>
    </update>
</mapper>