<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.pos.transaction.dao.PosUserTransactionRecordDao">

    <select id="get" resultType="com.pos.transaction.domain.UserPosTransactionRecord">
        SELECT
        <include refid="recordColumns"/>
        FROM
        user_pos_transaction_record uptr
        WHERE
        `id` = #{transactionId}
    </select>

    <insert id="saveNormalTransaction" parameterType="com.pos.transaction.domain.UserPosTransactionRecord"
            useGeneratedKeys="true" keyProperty="transaction.id">
        INSERT INTO user_pos_transaction_record
        (
            record_num,
            transaction_type,
            in_card,
            user_id,
            amount,
            out_card_info,
            status,
            create_date
        ) VALUE
        (
            #{transaction.recordNum},
            #{transaction.transactionType},
            #{transaction.inCardId},
            #{transaction.userId},
            #{transaction.amount},
            #{transaction.outCardInfo},
            #{transaction.status},
            NOW()
        )
    </insert>

    <insert id="saveBrokerageTransaction" parameterType="com.pos.transaction.domain.UserPosTransactionRecord"
            useGeneratedKeys="true" keyProperty="transaction.id">
        INSERT INTO user_pos_transaction_record
        (
            record_num,
            transaction_type,
            in_card,
            user_id,
            amount,
            arrival_amount,
            pos_charge,
            status,
            create_date
        ) VALUE
        (
            #{transaction.recordNum},
            #{transaction.transactionType},
            #{transaction.inCardId},
            #{transaction.userId},
            #{transaction.amount},
            #{transaction.arrivalAmount},
            #{transaction.posCharge},
            #{transaction.status},
            NOW()
        )
    </insert>

    <insert id="saveUpgradeTransaction" parameterType="com.pos.transaction.domain.UserPosTransactionRecord"
            useGeneratedKeys="true" keyProperty="transaction.id">
        INSERT INTO user_pos_transaction_record
        (
            record_num,
            transaction_type,
            in_card,
            user_id,
            amount,
            out_card_info,
            pay_charge,
            status,
            create_date
        ) VALUE
        (
            #{transaction.recordNum},
            #{transaction.transactionType},
            #{transaction.inCardId},
            #{transaction.userId},
            #{transaction.amount},
            #{transaction.outCardInfo},
            #{transaction.payCharge},
            #{transaction.status},
            NOW()
        )
    </insert>

    <update id="updateTransaction">
        UPDATE user_pos_transaction_record
        <set>
            <if test="transaction.amount != null">
                amount = #{transaction.amount},
            </if>
            <if test="transaction.serviceCharge != null">
                service_charge = #{transaction.serviceCharge},
            </if>
            <if test="transaction.arrivalAmount != null">
                arrival_amount = #{transaction.arrivalAmount},
            </if>
            <if test="transaction.payCharge != null">
                pay_charge = #{transaction.payCharge},
            </if>
            <if test="transaction.posCharge != null">
                pos_charge = #{transaction.posCharge},
            </if>
            <if test="transaction.status != null">
                status = #{transaction.status},
            </if>
            <if test="transaction.helibaoZhifuNum!=null">
                helibao_zhifu_num=#{transaction.helibaoZhifuNum},
            </if>
            <if test="transaction.helibaoTixianNum!=null">
                helibao_tixian_num=#{transaction.helibaoTixianNum},
            </if>
            <if test="transaction.payDate!=null">
                pay_date=#{transaction.payDate},
            </if>
            <if test="transaction.completeDate!=null">
                complete_date=#{transaction.completeDate},
            </if>
            <if test="transaction.outCardInfo != null">
                out_card_info = #{transaction.outCardInfo},
            </if>
            update_time = NOW()
        </set>
        WHERE id = #{transaction.id}
    </update>

    <update id="incrementFailureTimes">
        UPDATE user_pos_transaction_record
        SET
            failure_times = failure_times + 1,
            update_time = NOW()
        WHERE `id` = #{transactionId}
    </update>

    <select id="queryDailyStatistics" resultType="com.pos.transaction.dto.brokerage.BrokerageDailyStatisticsDto">
        SELECT
        DATE_FORMAT(uptr.complete_date, '%Y-%m-%d') AS dateKey,
        COUNT(*) AS orderCount,
        SUM(uptr.agent_charge) AS brokerage
        FROM user_pos_transaction_record uptr
        WHERE uptr.agent_id = #{user.userId}
        AND uptr.complete_date IS NOT NULL
        GROUP BY dateKey
        ORDER BY uptr.complete_date DESC
        LIMIT #{limitHelper.offset}, #{limitHelper.pageSize}
    </select>

    <select id="queryTransactionRecordCount" resultType="int">
        SELECT COUNT(*)
        FROM user_pos_transaction_record uptr
        <include refid="conditionColumns"/>
    </select>

    <select id="queryTransactionRecord" resultType="com.pos.transaction.domain.UserPosTransactionRecord">
        SELECT
        <include refid="recordColumns"/>
        FROM user_pos_transaction_record uptr
        <include refid="conditionColumns"/>
        <if test="orderHelper != null">
            ORDER BY ${orderHelper.fieldName} ${orderHelper.ordination}
        </if>
        LIMIT #{limitHelper.offset}, #{limitHelper.pageSize}
    </select>

    <select id="querySimpleStatistics" resultType="com.pos.transaction.dto.transaction.TransactionSimpleStatisticsDto">
        SELECT
          uptr.user_id AS userId,
          COUNT(*) AS transactionCount,
          SUM(uptr.amount) AS transactionAmount
        FROM user_pos_transaction_record uptr
        WHERE uptr.user_id IN
        <foreach collection="userIds" index="index" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
        AND (uptr.status = 3 OR uptr.status = 4)
        GROUP BY uptr.user_id
    </select>

    <update id="updateTransactionOutCardInfo" parameterType="com.pos.transaction.domain.UserPosTransactionRecord">
        UPDATE user_pos_transaction_record
        SET out_card_info = #{record.outCardInfo},
        update_time = NOW()
        WHERE id = #{record.id}
    </update>

    <update id="updateTransactionRecordNum">
        UPDATE user_pos_transaction_record
        SET record_num = #{recordNum},
        update_time = NOW()
        WHERE id = #{transactionId}
    </update>

    <sql id="conditionColumns">
        <if test="condition != null">
            <where>
                <if test="condition.id != null">
                    uptr.id = #{condition.id}
                </if>
                <if test="condition.recordNum != null">
                    AND uptr.record_num = #{condition.recordNum}
                </if>
                <if test="condition.userId != null">
                    AND uptr.user_id = #{condition.userId}
                </if>
                <if test="condition.includeUserIds != null">
                    AND uptr.user_id IN
                    <foreach collection="condition.includeUserIds" index="index" item="item" open="(" separator="," close=")">
                        #{item}
                    </foreach>
                </if>
                <if test="condition.status != null">
                    AND uptr.status = #{condition.status}
                </if>
                <if test="condition.excludedStatuses != null">
                    AND uptr.status NOT IN
                    <foreach collection="condition.excludedStatuses" index="index" item="item" open="(" separator="," close=")">
                        #{item}
                    </foreach>
                </if>
                <if test="condition.beginDate != null">
                    AND uptr.create_date &gt;= #{condition.beginDate}
                </if>
                <if test="condition.endDate != null">
                    AND uptr.create_date &lt;= #{condition.endDate}
                </if>
                <if test="condition.transactionType != null">
                    AND uptr.transaction_type = #{condition.transactionType}
                </if>
                <if test="condition.excludeTransactionTypes != null">
                    AND uptr.transaction_type NOT IN
                    <foreach collection="condition.excludeTransactionTypes" index="index" item="item" open="(" separator="," close=")">
                        #{item}
                    </foreach>
                </if>
            </where>
        </if>
    </sql>

    <sql id="recordColumns">
        uptr.id AS id,
        uptr.record_num AS recordNum,
        uptr.transaction_type AS transactionType,
        uptr.in_card AS inCardId,
        uptr.out_card_info AS outCardInfo,
        uptr.user_id AS userId,
        uptr.amount AS amount,
        uptr.service_charge AS serviceCharge,
        uptr.arrival_amount AS arrivalAmount,
        uptr.pay_charge AS payCharge,
        uptr.pos_charge AS posCharge,
        uptr.status AS status,
        uptr.create_date AS createDate,
        uptr.helibao_zhifu_num AS helibaoZhifuNum,
        uptr.helibao_tixian_num AS helibaoTixianNum,
        uptr.pay_date AS payDate,
        uptr.complete_date AS completeDate,
        uptr.failure_times AS failureTimes,
        uptr.update_time AS updateTime
    </sql>
</mapper>