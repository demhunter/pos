<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.pos.pos.dao.TwitterBrokerageDao">

    <insert id="save" parameterType="com.pos.pos.domain.TwitterBrokerage">
        INSERT INTO brokerage (
            transaction_id,
            base_rate,
            twitter_user_id,
            twitter_brokerage_rate,
            twitter_brokerage,
            twitter_brokerage_status,
            twitter_brokerage_status_time,
            parent_user_id,
            parent_brokerage_rate,
            parent_brokerage,
            parent_brokerage_status,
            parent_brokerage_status_time,
            create_time
        ) VALUE (
            #{brokerage.transactionId},
            #{brokerage.baseRate},
            #{brokerage.twitterUserId},
            #{brokerage.twitterBrokerageRate},
            #{brokerage.twitterBrokerage},
            #{brokerage.twitterBrokerageStatus},
            #{brokerage.twitterBrokerageStatusTime},
            #{brokerage.parentUserId},
            #{brokerage.parentBrokerageRate},
            #{brokerage.parentBrokerage},
            #{brokerage.parentBrokerageStatus},
            #{brokerage.parentBrokerageStatusTime},
            NOW()
        )
    </insert>

    <select id="queryTwitterDailyStatistics" resultType="com.pos.pos.dto.twitter.TwitterDailyStatisticsDto">
        SELECT
        DATE_FORMAT(create_time, '%Y-%m-%d') AS dateKey,
        SUM(IF(twitter_user_id = #{twitterUserId}, twitter_brokerage, 0)) AS customerBrokerage,
        SUM(IF(parent_user_id = #{twitterUserId}, parent_brokerage, 0)) AS childTwitterBrokerage
        FROM brokerage
        WHERE twitter_user_id = #{twitterUserId} OR parent_user_id = #{twitterUserId}
        GROUP BY dateKey
        ORDER BY dateKey DESC
        LIMIT #{limitHelper.offset}, #{limitHelper.pageSize}
    </select>

    <select id="queryTwitterCanApplyMoney" resultType="Decimal">
        SELECT
        customerBrokerage + childTwitterBrokerage
        FROM (
            SELECT
            SUM(IF(twitter_user_id = #{twitterUserId} AND twitter_brokerage_status = 0, twitter_brokerage, 0)) AS customerBrokerage,
            SUM(IF(parent_user_id = #{twitterUserId} AND parent_brokerage_status = 0, parent_brokerage, 0)) AS childTwitterBrokerage
            FROM brokerage
            WHERE create_time &lt;= #{deadline}
        ) T
    </select>

    <select id="queryTwitterDateSectionBrokerage" resultType="Decimal">
        SELECT
        customerBrokerage + childTwitterBrokerage
        FROM (
            SELECT
            SUM(IF(twitter_user_id = #{twitterUserId}, twitter_brokerage, 0)) AS customerBrokerage,
            SUM(IF(parent_user_id = #{twitterUserId}, parent_brokerage, 0)) AS childTwitterBrokerage
            FROM brokerage
            WHERE create_time &gt;= #{beginTime}
            AND create_time &lt;= #{endTime}
        ) T
    </select>

    <update id="markTwitterStatus">
        UPDATE brokerage
        SET twitter_brokerage_status = #{toStatus},
        twitter_brokerage_status_time = NOW()
        WHERE twitter_user_id = #{userId}
        AND twitter_brokerage_status = #{fromStatus}
        <if test="deadline != null">
            AND create_time &lt;= #{deadline}
        </if>
    </update>

    <update id="markParentStatus">
        UPDATE brokerage
        SET parent_brokerage_status = #{toStatus},
        parent_brokerage_status_time = NOW()
        WHERE parent_user_id = #{userId}
        AND parent_brokerage_status = #{fromStatus}
        <if test="deadline != null">
            AND create_time &lt;= #{deadline}
        </if>
    </update>

    <select id="queryAgentBrokerageMap" resultType="com.pos.pos.dto.twitter.TwitterBrokerageStatisticsDto">
        SELECT
            trans.user_id AS userId,
            SUM(b.twitter_brokerage) AS brokerage
        FROM `transaction` trans
        LEFT JOIN brokerage b ON b.transaction_id = trans.id
        WHERE trans.user_id IN
        <foreach collection="userIds" index="index" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
        AND (trans.status = 3 OR trans.status = 4)
        GROUP BY trans.user_id
    </select>

    <select id="queryParentAgentBrokerageMap" resultType="com.pos.pos.dto.twitter.TwitterBrokerageStatisticsDto">
        SELECT
        upji.twitter_user_id AS userId,
        SUM(uptb.parent_agent_charge) AS brokerage
        FROM twitter_customer tc
        LEFT JOIN `transaction` trans ON trans.user_id = tc.user_id
        LEFT JOIN brokerage b ON b.transaction_id = trans.id
        WHERE tc.twitter_user_id IN
        <foreach collection="userIds" index="index" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
        AND (trans.status = 3 OR trans.status = 4)
        AND tc.available = 1
        GROUP BY tc.channel_user_id
    </select>
</mapper>