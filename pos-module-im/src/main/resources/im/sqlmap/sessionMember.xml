<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.pos.im.dao.SessionMemberDao">

    <insert id="save" parameterType="com.pos.im.domain.SessionMember">
        INSERT INTO
        im_session_member (session_id, user_id, user_type, user_join_type,
        company_id, create_time, update_time, available)
        VALUES
        (#{member.sessionId}, #{member.userId}, #{member.userType}, #{member.userJoinType},
        #{member.companyId}, #{member.createTime}, #{member.updateTime}, #{member.available})
    </insert>

    <insert id="saveBatch" parameterType="java.util.List">
        INSERT INTO
        im_session_member (session_id, user_id, user_type, user_join_type,
        company_id, create_time, update_time, available)
        VALUES
        <foreach collection="list" item="member" index="index" separator=",">
            (#{member.sessionId}, #{member.userId}, #{member.userType}, #{member.userJoinType},
            #{member.companyId}, #{member.createTime}, #{member.updateTime}, #{member.available})
        </foreach>
    </insert>

    <update id="update" parameterType="com.pos.im.domain.SessionMember">
        UPDATE im_session_member sm
        SET
        <if test="member.lastRenameTime != null">
            sm.last_rename_time = #{member.lastRenameTime},
        </if>
        sm.update_time = #{member.updateTime}, sm.available = #{member.available}
        WHERE sm.id = #{member.id}
    </update>

    <select id="find" resultType="com.pos.im.domain.SessionMember">
        SELECT
        <include refid="memberColumns"/>
        FROM im_session_member sm
        WHERE sm.session_id = #{sessionId} AND sm.user_id = #{userId} AND sm.user_type = #{userType}
    </select>

    <select id="findBySessionId" resultType="com.pos.im.domain.SessionMember">
        SELECT
        <include refid="memberColumns"/>
        FROM im_session_member sm
        WHERE sm.session_id = #{sessionId}
        <if test="available != null">
            AND sm.available = #{available}
        </if>
    </select>

    <select id="findInSessionIds" resultType="com.pos.im.domain.SessionMember">
        SELECT
        <include refid="memberColumns"/>
        FROM im_session_member sm
        WHERE sm.session_id IN
        <foreach item="sid" index="index" collection="sessionIds" open="(" separator="," close=")">
            #{sid}
        </foreach>
        <if test="available != null">
            AND sm.available = #{available}
        </if>
    </select>

    <select id="findMembersBySessionId" resultType="com.pos.im.dto.session.SessionMemberDto">
        SELECT
        <include refid="memberDtoColumns"/>
        <if test="queryCompany">
            , ci.name AS companyName
            , ci.im_sms_enable AS companySmsEnable
            , ci.im_notice_enable AS companyNoticeEnable
        </if>
        FROM im_session_member sm
        INNER JOIN im_user_info ui ON ui.user_id = sm.user_id AND ui.user_type = sm.user_type
        <if test="queryCompany">
            LEFT JOIN im_company_info ci ON ci.company_id = sm.company_id
        </if>
        WHERE sm.session_id = #{sessionId}
        <if test="available != null">
            AND sm.available = #{available}
        </if>
    </select>

    <select id="findMembersInSessionIds" resultType="com.pos.im.dto.session.SessionMemberDto">
        SELECT
        <include refid="memberDtoColumns"/>
        <if test="queryCompany">
            , ci.name AS companyName
            , ci.im_sms_enable AS companySmsEnable
            , ci.im_notice_enable AS companyNoticeEnable
        </if>
        FROM im_session_member sm
        INNER JOIN im_user_info ui ON ui.user_id = sm.user_id AND ui.user_type = sm.user_type
        <if test="queryCompany">
            LEFT JOIN im_company_info ci ON ci.company_id = sm.company_id
        </if>
        WHERE sm.session_id IN
        <foreach item="sid" index="index" collection="sessionIds" open="(" separator="," close=")">
            #{sid}
        </foreach>
        <if test="available != null">
            AND sm.available = #{available}
        </if>
    </select>

    <select id="findMembersIdentifier" resultType="com.pos.basic.dto.UserIdentifier">
        SELECT
        sm.user_id as userId,
        sm.user_type as userType
        FROM im_session_member sm
        WHERE sm.session_id = #{sessionId} AND sm.available = 1
    </select>

    <select id="findUserIdBySessionId" resultType="long">
        SELECT
        sm.user_id
        FROM im_session_member sm
        WHERE sm.session_id = #{sessionId}
    </select>

    <update id="incrementCallTotal">
        UPDATE im_session_member SET call_total = call_total + 1
        WHERE session_id = #{sessionId} AND user_id = #{userId} AND user_type = #{userType}
    </update>

    <select id="querySessionIdsByUser" resultType="Long">
        SELECT sm.session_id
        FROM im_session_member sm
        WHERE sm.user_id = #{user.userId}
        AND sm.user_type = #{user.userType}
        <if test="available != null">
            AND sm.available = #{available}
        </if>
    </select>

    <sql id="memberColumns">
        sm.id as id,
        sm.session_id as sessionId,
        sm.user_id as userId,
        sm.user_type as userType,
        sm.user_join_type as userJoinType,
        sm.company_id as companyId,
        sm.call_total as callTotal,
        sm.create_time as createTime,
        sm.update_time as updateTime,
        sm.last_rename_time as lastRenameTime,
        sm.available as available
    </sql>

    <sql id="memberDtoColumns">
        sm.session_id as sessionId,
        sm.user_id as userId,
        sm.user_type as userType,
        sm.user_join_type as userJoinType,
        sm.company_id as companyId,
        sm.call_total as callTotal,
        sm.available as available,
        ui.im_uid as imUid,
        ui.user_detail_type as userDetailType,
        ui.user_title as userTitle,
        ui.show_name as showName,
        ui.show_head as showHead,
        ui.gender as gender,
        ui.phone as phone,
        ui.public_phone as publicPhone
    </sql>

</mapper>