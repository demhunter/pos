<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.pos.data.repair.dao.RepairV2_0_0Dao">

    <select id="queryAllRecords" resultType="com.pos.transaction.dto.PosUserGetBrokerageRecordDto">
        SELECT
        <include refid="getBrokerageRecordColumns"/>
        FROM user_pos_get_brokerage_record upgbr
    </select>

    <sql id="getBrokerageRecordColumns">
        upgbr.`id` AS `id`,
        upgbr.user_id AS userId,
        upgbr.amount AS amount,
        upgbr.pay_mode AS payMode,
        upgbr.voucher AS voucher,
        upgbr.pay_date AS payDate,
        upgbr.remark AS remark
    </sql>

    <insert id="saveBrokerageTransaction" parameterType="com.pos.transaction.domain.UserPosTransactionRecord"
            useGeneratedKeys="true" keyProperty="transaction.id">
        INSERT INTO user_pos_transaction_record
        (
        record_num,
        transaction_type,
        in_card,
        user_id,
        amount,
        arrival_amount,
        pos_charge,
        status,
        create_date,
        complete_date
        ) VALUE
        (
        #{transaction.recordNum},
        #{transaction.transactionType},
        #{transaction.inCardId},
        #{transaction.userId},
        #{transaction.amount},
        #{transaction.arrivalAmount},
        #{transaction.posCharge},
        #{transaction.status},
        #{transaction.createDate},
        #{transaction.completeDate}
        )
    </insert>

    <select id="getPermission" resultType="com.pos.authority.domain.CustomerPermission">
        SELECT
        `id`,
        user_id AS userId,
        `level` AS `level`,
        withdraw_rate AS withdrawRate,
        extra_service_charge AS extraServiceCharge,
        audit_status AS auditStatus,
        reject_reason AS rejectReason,
        id_card_name AS idCardName,
        id_card_no AS idCardNo,
        id_image_a AS idImageA,
        id_image_b AS idImageB,
        pos_card_id AS posCardId,
        pos_card_image AS posCardImage,
        update_user_id AS updateUserId,
        update_time AS updateTime,
        create_time AS createTime
        FROM customer_permission
        WHERE user_id = #{userId}
    </select>

    <select id="getPermissions" resultType="com.pos.authority.domain.CustomerPermission">
        SELECT
        `id`,
        user_id AS userId,
        `level` AS `level`,
        withdraw_rate AS withdrawRate,
        extra_service_charge AS extraServiceCharge,
        audit_status AS auditStatus,
        reject_reason AS rejectReason,
        id_card_name AS idCardName,
        id_card_no AS idCardNo,
        id_image_a AS idImageA,
        id_image_b AS idImageB,
        pos_card_id AS posCardId,
        pos_card_image AS posCardImage,
        update_user_id AS updateUserId,
        update_time AS updateTime,
        create_time AS createTime
        FROM customer_permission
        WHERE user_id IN
        <foreach collection="userIds" item="item" index="index" open="(" separator="," close=")">
            #{item}
        </foreach>
    </select>

    <insert id="saveTransactionHandled" parameterType="com.pos.transaction.domain.UserPosTransactionHandledInfo">
        INSERT INTO user_pos_transaction_handled_info (
        record_id,
        amount,
        pay_mode,
        voucher,
        remark,
        create_user_id,
        create_date
        ) VALUE (
        #{handledInfo.recordId},
        #{handledInfo.amount},
        #{handledInfo.payMode},
        #{handledInfo.voucher},
        #{handledInfo.remark},
        #{handledInfo.createUserId},
        #{handledInfo.createDate}
        )
    </insert>

    <select id="queryAllTwitterBrokerage" resultType="com.pos.transaction.domain.UserPosTwitterBrokerage">
        SELECT
            `id` AS `id`,
            record_id AS recordId,
            base_rate AS baseRate,
            agent_user_id AS agentUserId,
            agent_rate AS agentRate,
            agent_charge AS agentCharge,
            get_agent AS getAgent,
            get_agent_date AS getAgentDate,
            parent_agent_user_id AS parentAgentUserId,
            parent_agent_rate AS parentAgentRate,
            parent_agent_charge AS parentAgentCharge,
            get_parent_agent AS getParentAgent,
            get_parent_agent_date AS getParentDate,
            create_date AS createDate
        FROM user_pos_twitter_brokerage
    </select>

    <insert id="saveCustomerBrokerages" parameterType="com.pos.transaction.domain.TransactionCustomerBrokerage">
        INSERT INTO transaction_customer_brokerage
        (
            transaction_id,
            ancestor_user_id,
            `level`,
            withdraw_rate,
            brokerage_rate,
            brokerage,
            status_time,
            create_time
        ) VALUES
        <foreach collection="brokerages" item="item" index="index" open="" separator="," close="">
            (
            #{item.transactionId},
            #{item.ancestorUserId},
            #{item.level},
            #{item.withdrawRate},
            #{item.brokerageRate},
            #{item.brokerage},
            NOW(),
            NOW()
            )
        </foreach>
    </insert>

    <select id="queryAllCustomerStatistics" resultType="com.pos.authority.domain.CustomerStatistics">
        SELECT * FROM customer_statistics
    </select>

    <select id="queryAllRelation" resultType="com.pos.authority.domain.CustomerRelation">
        SELECT * FROM customer_relation
    </select>

    <select id="queryNormalTransaction" resultType="com.pos.transaction.domain.UserPosTransactionRecord">
        SELECT *
        FROM user_pos_transaction_record
        WHERE transaction_type = 1
        AND (status = 3 OR status = 4)
    </select>

    <select id="queryAllCustomerBrokerage" resultType="com.pos.transaction.domain.TransactionCustomerBrokerage">
        SELECT * FROM transaction_customer_brokerage
    </select>

    <select id="queryBrokerageTransaction" resultType="com.pos.transaction.domain.UserPosTransactionRecord">
        SELECT *
        FROM user_pos_transaction_record
        WHERE transaction_type = 2
        AND (status = 3 OR status = 4)
    </select>

    <update id="updateCustomerStatistics" parameterType="com.pos.authority.domain.CustomerStatistics">
        UPDATE customer_statistics
        SET children_count = #{statistics.childrenCount},
        withdraw_amount = #{statistics.withdrawAmount},
        withdraw_amount_times = #{statistics.withdrawAmountTimes},
        total_brokerage = #{statistics.totalBrokerage},
        withdrawal_brokerage = #{statistics.withdrawalBrokerage},
        withdrawal_brokerage_times = #{statistics.withdrawalBrokerageTimes},
        update_time = NOW()
        WHERE user_id = #{statistics.userId}
    </update>
</mapper>