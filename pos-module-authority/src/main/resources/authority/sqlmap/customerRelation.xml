<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.pos.authority.dao.CustomerRelationDao">

    <insert id="save" parameterType="com.pos.authority.domain.CustomerRelation" useGeneratedKeys="true" keyProperty="relation.id">
        INSERT INTO customer_relation
        (
            user_id,
            parent_user_id,
            create_time
        ) VALUE (
            #{relation.userId},
            #{relation.parentUserId},
            NOW()
        )
    </insert>

    <select id="getRelations" resultType="com.pos.authority.dto.relation.CustomerRelationDto">
        SELECT
            cr.`id` AS `id`,
            cr.user_id AS userId,
            cp.`level` AS `level`,
            cp.withdraw_rate AS withdrawRate,
            cp.extra_service_charge AS extraServiceCharge,
            cp.audit_status AS auditStatus,
            cr.parent_user_id AS parentUserId,
            cr.remark AS remark,
            cr.update_user_id AS updateUserId,
            cr.update_time AS updateTime,
            cr.create_time AS relationTime
        FROM
        customer_relation cr
        INNER JOIN customer_permission cp ON cr.user_id = cp.user_id
        LIMIT #{limitHelper.offset}, #{limitHelper.pageSize}
    </select>

    <select id="getByChildUserId" resultType="com.pos.authority.dto.relation.CustomerRelationDto">
        SELECT
            cr.`id` AS `id`,
            cr.user_id AS userId,
            cp.`level` AS `level`,
            cp.withdraw_rate AS withdrawRate,
            cp.extra_service_charge AS extraServiceCharge,
            cp.audit_status AS auditStatus,
            cr.parent_user_id AS parentUserId,
            cr.remark AS remark,
            cr.update_user_id AS updateUserId,
            cr.update_time AS updateTime,
            cr.create_time AS relationTime
        FROM
        customer_relation cr
        INNER JOIN customer_permission cp ON cr.user_id = cp.user_id
        WHERE cr.user_id = #{childUserId}
    </select>

    <update id="updateChildRemark" parameterType="com.pos.authority.dto.relation.CustomerRelationDto">
        UPDATE customer_relation
        SET remark = #{relation.remark},
        update_user_id = #{relation.updateUserId},
        update_time = NOW()
        WHERE `id` = #{relation.id}
    </update>

    <select id="queryChildrenCount" resultType="int">
        SELECT
        COUNT(*)
        FROM customer_relation cr
        INNER JOIN `user` AS u ON u.id = cr.user_id
        INNER JOIN customer_permission cp ON cp.user_id = u.id
        <include refid="childrenConditionColumns"/>
    </select>

    <select id="queryChildren" resultType="com.pos.authority.dto.relation.ChildInfoDto">
        SELECT
            cr.user_id AS userId,
            u.`name` AS `name`,
            u.user_phone AS phone,
            cp.level AS level,
            cp.audit_status AS auditStatus,
            cr.remark AS remark,
            cr.create_time AS relationTime
        FROM customer_relation cr
        INNER JOIN `user` AS u ON u.id = cr.user_id
        INNER JOIN customer_permission cp ON cp.user_id = u.id
        <include refid="childrenConditionColumns"/>
        ORDER BY cr.create_time DESC
        LIMIT #{limitHelper.offset}, #{limitHelper.pageSize}
    </select>

    <sql id="childrenConditionColumns">
        <where>
            <if test="condition.parentUserId != null">
                cr.parent_user_id = #{condition.parentUserId}
            </if>
            <if test="condition.level != null">
                AND cp.level = #{condition.level}
            </if>
            <if test="condition.searchKey != null and condition.searchKey != ''">
                AND (
                u.name LIKE CONCAT('%', #{condition.searchKey}, '%')
                OR cr.remark LIKE CONCAT('%', #{condition.searchKey}, '%')
                )
            </if>
        </where>
    </sql>
</mapper>